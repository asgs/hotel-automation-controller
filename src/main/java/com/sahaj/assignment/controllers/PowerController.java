/**
 * 
 */
package com.sahaj.assignment.controllers;

import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import com.sahaj.assignment.components.Floor;
import com.sahaj.assignment.components.LightBulb;
import com.sahaj.assignment.components.Motion;
import com.sahaj.assignment.components.SubCorridor;
import com.sahaj.assignment.criteria.PowerConsumptionCriteria;
import com.sahaj.assignment.entity.Hotel;

/**
 * 
 * The Heartbeat of this Application - Observes the {@link Motion} events
 * generated by the Sensors, prints the Hotel state on every external input,
 * adjusts the state of the Floors based on the {@link PowerConsumptionCriteria}
 * 
 * @author asgs
 *
 */
public class PowerController implements Observer {

	private Hotel hotel;
	private PowerControllerHelper powerControllerHelper;

	/**
	 * Helps storing information on which SubCorridor's AC was turned on when
	 * some other Subcorridor's Light Bulb had to be switched ON to maintain the
	 * correct level of Power consumption.
	 */
	private Map<SubCorridor, SubCorridor> subCorridorCoordination;

	/**
	 * 
	 */
	public PowerController(Hotel hotel) {
		this.hotel = hotel;
		subCorridorCoordination = new HashMap<>();
		powerControllerHelper = new PowerControllerHelper();
	}

	private boolean isPowerConsumptionExceededForFloor(Floor floor) {
		PowerConsumptionCriteria powerConsumptionCriteria = new PowerConsumptionCriteria();
		return !powerConsumptionCriteria.criteriaMetFor(floor);
	}

	@Override
	public void update(Observable o, Object arg) {
		Motion motion = (Motion) o;
		toggleSubCorridorsLights(motion, (Boolean) arg);
	}

	/**
	 * Toggles the {@link LightBulb} for the matching {@link SubCorridor} where
	 * the motion was detected (or not detected after certain time period).
	 * 
	 * @param motion
	 *            The Motion event instance.
	 * @param on
	 *            To turn on or not.
	 */
	private void toggleSubCorridorsLights(Motion motion, boolean on) {
		Floor matchingFloor = powerControllerHelper.findMatchingFloor(hotel,
				motion);
		SubCorridor matchingSubCorridor = powerControllerHelper
				.findMatchingSubCorridor(motion, matchingFloor);
		if (powerControllerHelper
				.isLightBulbSwitchedOnAtSubCorridor(matchingSubCorridor) == on) {
			// Nothing to do. Everything is as expected.
			return;
		}

		matchingSubCorridor.getLightBulbs().forEach(
				lightBulb -> lightBulb.setSwitchedOn(on));

		// If the power consumption exceeds, find some other subCorridor and
		// turn off its AC.
		if (isPowerConsumptionExceededForFloor(matchingFloor)) {
			SubCorridor someOtherSubCorridor = powerControllerHelper
					.findSomeOtherSubCorridor(motion, matchingFloor,
							matchingSubCorridor);
			powerControllerHelper
					.switchACOffAtSubCorridor(someOtherSubCorridor);
			subCorridorCoordination.put(matchingSubCorridor,
					someOtherSubCorridor);
		} else {
			// Else, we could turn the AC back on, which was turned off in the
			// previous iteration.
			SubCorridor otherSubCorridor = subCorridorCoordination
					.get(matchingSubCorridor);
			powerControllerHelper.switchACOnAtSubCorridor(otherSubCorridor);
		}
	}

	/**
	 * @return the hotel
	 */
	public Hotel getHotel() {
		return hotel;
	}

	/**
	 * @return the powerControllerHelper
	 */
	public PowerControllerHelper getPowerControllerHelper() {
		return powerControllerHelper;
	}

	/**
	 * @return the subCorridorCoordination
	 */
	public Map<SubCorridor, SubCorridor> getSubCorridorCoordination() {
		return subCorridorCoordination;
	}

}
